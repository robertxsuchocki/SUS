rules <- list()
while (length(uncoveredObjIdx) > 0) {
nextRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
print(length(uncoveredObjIdx))
}
View(rules)
#additional variables
uncoveredObjIdx = 1:nrow(dataSet)    #store indexes of non-covered objects
K = 10                               #number of rules "remembered" in the next iteration
bestRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
bestRule
rules <- list()
View(results)
View(rules)
while (length(uncoveredObjIdx) > 0) {
nextRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
print(length(uncoveredObjIdx))
}
#additional variables
uncoveredObjIdx = 1:nrow(dataSet)    #store indexes of non-covered objects
K = 10                               #number of rules "remembered" in the next iteration
bestRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
bestRule
rules <- list()
while (length(uncoveredObjIdx) > 0) {
nextRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[uncoveredObjIdx, 1], sort(unique(dataSet[uncoveredObjIdx, 1])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
print(length(uncoveredObjIdx))
}
View(rules)
dataSet[[1]]
dataSet[[-1]]
dataSet[1:10000, -1]
dataSet[1:length(dataSet), -1]
dataSet
dataSet[1:length(dataSet), -1]
dataSet[1:nrow(dataSet), -1]
dataSet
dataSet[1:10]
dataSet[1:10,]
#additional variables
uncoveredObjIdx = 1:nrow(dataSet)    #store indexes of non-covered objects
K = 10                               #number of rules "remembered" in the next iteration
bestRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
bestRule
rules <- list()
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(dataSet)
nextRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
dataSet = dataSet[uncoveredObjIdx,]
print(nrow(dataSet))
}
View(rules)
#function for identifying the best rule
findBestRule = function(dataSet, clsVec, uniqueCls, K = 10)  {
descriptorsList = lapply(dataSet, function(x) sort(unique(x)))
descriptorCandidates = list()
for(i in 1:length(descriptorsList)) {
descriptorCandidates = c(descriptorCandidates,
lapply(descriptorsList[[i]],
function(v, x) return(list(idx = x, values = v)), i))
}
ruleCandidates = lapply(descriptorCandidates, laplaceEstimate, dataSet, clsVec, uniqueCls)
endFlag = F
ruleScores = sapply(ruleCandidates, function(x) return(x$laplace))
bestIdx = which.max(ruleScores)
bestRule = ruleCandidates[[bestIdx]]
ruleCandidates = ruleCandidates[order(ruleScores, decreasing = T)[1:K]]
while(!endFlag) {
ruleCandidates = addDescriptor(ruleCandidates, descriptorCandidates)
ruleCandidates = lapply(ruleCandidates, laplaceEstimate, dataSet, clsVec, uniqueCls)
ruleScores = sapply(ruleCandidates, function(x) return(x$laplace))
if(bestRule$laplace < max(ruleScores)) {
bestIdx = which.max(ruleScores)
bestRule = ruleCandidates[[bestIdx]]
ruleCandidates = ruleCandidates[order(ruleScores, decreasing = T)[1:K]]
} else endFlag = T
}
return(bestRule)
}
#additional variables
uncoveredObjIdx = 1:nrow(dataSet)    #store indexes of non-covered objects
K = 10                               #number of rules "remembered" in the next iteration
bestRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
bestRule
rules <- list()
while (length(uncoveredObjIdx) > 0) {
nextRule = findBestRule(dataSet[1:nrow(dataSet),-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
rules = c(rules, nextRule)
dataSet = dataSet[1:nrow(dataSet)[!1:nrow(dataSet) %in% nextRule$support],]
print(length(rules))
}
rules <- list()
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(dataSet)
nextRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
rules = c(rules, nextRule)
print(length(rules))
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
dataSet = dataSet[uncoveredObjIdx,]
}
#We start with building a decision tree for a set of data - lymphography
#install.packages("e1071","rpart")
library(e1071)
library(rpart)
dataSet = read.table(file = "/home/robert/Code/SUS/7/lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
bestGiniModel = tune.rpart(class~., data = dataSet, parms = list(split = "gini"),
minsplit = seq(2,20,2), cp = c(0.1,0.05,0.02,0.01,0.005),
tunecontrol = tune.control(nrepeat = 10, cross = 10, repeat.aggregate = mean))
bestInfoModel = tune.rpart(class~., data = dataSet, parms = list(split = "information"),
minsplit = seq(2,20,2), cp = c(0.1,0.05,0.02,0.01,0.005),
tunecontrol = tune.control(nrepeat = 2, cross = 10, repeat.aggregate = mean))
plot(bestGiniModel)
plot(bestGiniModel, type="perspective")
X11()
plot(bestInfoModel)
plot(bestInfoModel, type="perspective")
X11()
bestGiniModel
bestInfoModel
#Decision rules
#Example of rules:
rpartModel = rpart(class~., dataSet, method = "class", parms = list(split = "gini"),
control = rpart.control(minsplit = 8, cp = 0.01))
par(xpd=NA)
plot(rpartModel)
text(rpartModel, use.n = T, pretty=0)
#another example:
fix(dataSet)
tmpDataSet = dataSet[1:5]
fix(tmpDataSet)
#Not all rules make sense. How to select "good" ones?
ruleCandidate = tmpDataSet[1,-1]
N = sum(apply(tmpDataSet, 1, function(x,y) return(all(x[-1] == y)), ruleCandidate))
Nd = sum(apply(tmpDataSet, 1, function(x,y) return(all(x[-1] == y) & x[1] == "malign lymph"), ruleCandidate))
#some examples of rule quality measures
#Rule support:
N/nrow(tmpDataSet)
#Rule confidence:
Nd/N
#Lift:
(Nd/N)/mean(tmpDataSet$class == "malign lymph")
#Laplace estimate:
(Nd + 1)/(N + length(unique(tmpDataSet$class)))
laplaceForRow <- function (nr, dataSet) {
row = dataSet[nr,]
rule = row[-1]
N  = sum(apply(dataSet, 1, function(x,y) return(all(x[-1] == y)), rule))
Nd = sum(apply(dataSet, 1, function(x,y) return(all(x[-1] == y) & x[1] == row$class), rule))
return((Nd + 1)/(N + length(unique(dataSet$class))))
}
restForRow <- function (nr, dataSet) {
row = dataSet[nr,]
rule = row[-1]
result = list()
N  = sum(apply(dataSet, 1, function(x,y) return(all(x[-1] == y)), rule))
Nd = sum(apply(dataSet, 1, function(x,y) return(all(x[-1] == y) & x[1] == row$class), rule))
result["Max index"] = nr
result["Rule support"] = N/nrow(dataSet)
result["Rule confidence"] = Nd/N
result["Lift"] = (Nd/N)/mean(dataSet$class == row$class)
return(result)
}
results = list()
for (i in 1:nrow(tmpDataSet)) {
results[i] = laplaceForRow(i, tmpDataSet)
}
restForRow(which.max(results), tmpDataSet)
#Function to calculate Laplace estimate
laplaceEstimate = function(rule, dataS, clsVec, uniqueCls) {
if(length(rule$idx) > 1) suppIdx = which(apply(dataS[rule$idx], 1, function(x,y) return(all(x == y)), rule$values))
else suppIdx = which(dataS[[rule$idx]] == rule$values)
clsFreqs = table(clsVec[suppIdx])
maxIdx = which.max(clsFreqs)
nOfCorrect = clsFreqs[maxIdx]
rule$consequent = names(clsFreqs)[maxIdx]
rule$support = as.integer(suppIdx)
rule$laplace = (nOfCorrect + 1)/(length(suppIdx) + length(uniqueCls))
return(rule)
}
#auxiliary function for finding rule candidates
addDescriptor = function(rulesList, descCandidates) {
candidates = list()
for(i in 1:length(rulesList)) {
candidates = c(candidates,
lapply(descCandidates,
function(descriptor, rule) return(list(idx = c(rule$idx, descriptor$idx),
values = c(as.character(rule$values), as.character(descriptor$values)))),
rulesList[[i]]))
}
return(candidates)
}
#function for identifying the best rule
findBestRule = function(dataSet, clsVec, uniqueCls, K = 10)  {
descriptorsList = lapply(dataSet, function(x) sort(unique(x)))
descriptorCandidates = list()
for(i in 1:length(descriptorsList)) {
descriptorCandidates = c(descriptorCandidates,
lapply(descriptorsList[[i]],
function(v, x) return(list(idx = x, values = v)), i))
}
ruleCandidates = lapply(descriptorCandidates, laplaceEstimate, dataSet, clsVec, uniqueCls)
endFlag = F
ruleScores = sapply(ruleCandidates, function(x) return(x$laplace))
bestIdx = which.max(ruleScores)
bestRule = ruleCandidates[[bestIdx]]
ruleCandidates = ruleCandidates[order(ruleScores, decreasing = T)[1:K]]
while(!endFlag) {
ruleCandidates = addDescriptor(ruleCandidates, descriptorCandidates)
ruleCandidates = lapply(ruleCandidates, laplaceEstimate, dataSet, clsVec, uniqueCls)
ruleScores = sapply(ruleCandidates, function(x) return(x$laplace))
if(bestRule$laplace < max(ruleScores)) {
bestIdx = which.max(ruleScores)
bestRule = ruleCandidates[[bestIdx]]
ruleCandidates = ruleCandidates[order(ruleScores, decreasing = T)[1:K]]
} else endFlag = T
}
return(bestRule)
}
#additional variables
uncoveredObjIdx = 1:nrow(dataSet)    #store indexes of non-covered objects
K = 10                               #number of rules "remembered" in the next iteration
bestRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
bestRule
rules <- list()
tmpDataSet = dataSet
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[uncoveredObjIdx,-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules = c(rules, nextRule)
print(length(rules))
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
}
View(rules)
nextRule
rules <- list()
rules
rules = c(rules, nextRule)
rules
View(rules)
rules <- list()
View(rules)
View(rules)
xd <- list()
View(xd)
View(rules)
rules <- list()
View(rules)
rules <- list()
tmpDataSet = dataSet
View(rules)
rules = c(rules, nextRule)
View(rules)
tmpDataSet = dataSet
rules <- list()
i = 1
View(rules)
K = 10                               #number of rules "remembered" in the next iteration
#additional variables
uncoveredObjIdx = 1:nrow(dataSet)    #store indexes of non-covered objects
K = 10                               #number of rules "remembered" in the next iteration
bestRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
bestRule
tmpDataSet = dataSet
rules <- list()
i = 1
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[uncoveredObjIdx,-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules[i] = nextRule
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
i++
}
tmpDataSet = dataSet
rules <- list()
i = 1
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[uncoveredObjIdx,-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules[i] = nextRule
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
i = i + 1
}
warnings()
View(rules)
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[uncoveredObjIdx,-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
}
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[uncoveredObjIdx,-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
print(nrow(tmpDataSet))
}
uncoveredObjIdx = 1:nrow(dataSet)
K = 10
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[uncoveredObjIdx,-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
print(nrow(tmpDataSet))
}
View(rules)
uncoveredObjIdx = 1:nrow(dataSet)
K = 10
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
nextRule = findBestRule(tmpDataSet[1:nrow(tmpDataSet),-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules = c(rules, nextRule)
tmpDataSet = tmpDataSet[1:nrow(tmpDataSet)[!1:nrow(tmpDataSet) %in% nextRule$support],]
print(nrow(tmpDataSet))
}
uncoveredObjIdx = 1:nrow(dataSet)
K = 10
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
nextRule = findBestRule(tmpDataSet[1:nrow(tmpDataSet),-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = 1:nrow(tmpDataSet)[!1:nrow(tmpDataSet) %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
print(nrow(tmpDataSet))
}
uncoveredObjIdx = 1:nrow(dataSet)
K = 10
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[1:nrow(tmpDataSet),-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), K)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
print(nrow(tmpDataSet))
}
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[1:nrow(tmpDataSet),-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), 10)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
print(nrow(tmpDataSet))
}
View(rules)
uncoveredObjIdx = 1:nrow(tmpDataSet)
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
nextRule = findBestRule(tmpDataSet[1:nrow(tmpDataSet),-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), 10)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
uncoveredObjIdx = 1:nrow(tmpDataSet)
print(length(uncoveredObjIdx))
}
uncoveredObjIdx = 1:nrow(tmpDataSet)
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[1:nrow(tmpDataSet),-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), 10)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
print(length(uncoveredObjIdx))
}
View(rules)
N = sum(apply(tmpDataSet, 1, function(x,y) return(all(x[-1] == y)), ruleCandidate))
Nd = sum(apply(tmpDataSet, 1, function(x,y) return(all(x[-1] == y) & x[1] == "malign lymph"), ruleCandidate))
#some examples of rule quality measures
#Rule support:
N/nrow(tmpDataSet)
#Rule confidence:
Nd/N
tmpDataSet = dataSet[1:5]
fix(tmpDataSet)
#Not all rules make sense. How to select "good" ones?
ruleCandidate = tmpDataSet[1,-1]
N = sum(apply(tmpDataSet, 1, function(x,y) return(all(x[-1] == y)), ruleCandidate))
Nd = sum(apply(tmpDataSet, 1, function(x,y) return(all(x[-1] == y) & x[1] == "malign lymph"), ruleCandidate))
#some examples of rule quality measures
#Rule support:
N/nrow(tmpDataSet)
#Rule confidence:
Nd/N
#Lift:
(Nd/N)/mean(tmpDataSet$class == "malign lymph")
#Laplace estimate:
(Nd + 1)/(N + length(unique(tmpDataSet$class)))
laplaceForRow <- function (nr, dataSet) {
row = dataSet[nr,]
rule = row[-1]
N  = sum(apply(dataSet, 1, function(x,y) return(all(x[-1] == y)), rule))
Nd = sum(apply(dataSet, 1, function(x,y) return(all(x[-1] == y) & x[1] == row$class), rule))
return((Nd + 1)/(N + length(unique(dataSet$class))))
}
restForRow <- function (nr, dataSet) {
row = dataSet[nr,]
rule = row[-1]
result = list()
N  = sum(apply(dataSet, 1, function(x,y) return(all(x[-1] == y)), rule))
Nd = sum(apply(dataSet, 1, function(x,y) return(all(x[-1] == y) & x[1] == row$class), rule))
result["Max index"] = nr
result["Rule support"] = N/nrow(dataSet)
result["Rule confidence"] = Nd/N
result["Lift"] = (Nd/N)/mean(dataSet$class == row$class)
return(result)
}
results = list()
for (i in 1:nrow(tmpDataSet)) {
results[i] = laplaceForRow(i, tmpDataSet)
}
restForRow(which.max(results), tmpDataSet)
#Function to calculate Laplace estimate
laplaceEstimate = function(rule, dataS, clsVec, uniqueCls) {
if(length(rule$idx) > 1) suppIdx = which(apply(dataS[rule$idx], 1, function(x,y) return(all(x == y)), rule$values))
else suppIdx = which(dataS[[rule$idx]] == rule$values)
clsFreqs = table(clsVec[suppIdx])
maxIdx = which.max(clsFreqs)
nOfCorrect = clsFreqs[maxIdx]
rule$consequent = names(clsFreqs)[maxIdx]
rule$support = as.integer(suppIdx)
rule$laplace = (nOfCorrect + 1)/(length(suppIdx) + length(uniqueCls))
return(rule)
}
#auxiliary function for finding rule candidates
addDescriptor = function(rulesList, descCandidates) {
candidates = list()
for(i in 1:length(rulesList)) {
candidates = c(candidates,
lapply(descCandidates,
function(descriptor, rule) return(list(idx = c(rule$idx, descriptor$idx),
values = c(as.character(rule$values), as.character(descriptor$values)))),
rulesList[[i]]))
}
return(candidates)
}
#function for identifying the best rule
findBestRule = function(dataSet, clsVec, uniqueCls, K = 10)  {
descriptorsList = lapply(dataSet, function(x) sort(unique(x)))
descriptorCandidates = list()
for(i in 1:length(descriptorsList)) {
descriptorCandidates = c(descriptorCandidates,
lapply(descriptorsList[[i]],
function(v, x) return(list(idx = x, values = v)), i))
}
ruleCandidates = lapply(descriptorCandidates, laplaceEstimate, dataSet, clsVec, uniqueCls)
endFlag = F
ruleScores = sapply(ruleCandidates, function(x) return(x$laplace))
bestIdx = which.max(ruleScores)
bestRule = ruleCandidates[[bestIdx]]
ruleCandidates = ruleCandidates[order(ruleScores, decreasing = T)[1:K]]
while(!endFlag) {
ruleCandidates = addDescriptor(ruleCandidates, descriptorCandidates)
ruleCandidates = lapply(ruleCandidates, laplaceEstimate, dataSet, clsVec, uniqueCls)
ruleScores = sapply(ruleCandidates, function(x) return(x$laplace))
if(bestRule$laplace < max(ruleScores)) {
bestIdx = which.max(ruleScores)
bestRule = ruleCandidates[[bestIdx]]
ruleCandidates = ruleCandidates[order(ruleScores, decreasing = T)[1:K]]
} else endFlag = T
}
return(bestRule)
}
#additional variables
uncoveredObjIdx = 1:nrow(dataSet)    #store indexes of non-covered objects
K = 10                               #number of rules "remembered" in the next iteration
bestRule = findBestRule(dataSet[uncoveredObjIdx,-1], dataSet[[1]], sort(unique(dataSet[[1]])), K)
bestRule
uncoveredObjIdx = 1:nrow(tmpDataSet)
uncoveredObjIdx = 1:nrow(tmpDataSet)
rules <- list()
tmpDataSet = dataSet
while (length(uncoveredObjIdx) > 0) {
uncoveredObjIdx = 1:nrow(tmpDataSet)
nextRule = findBestRule(tmpDataSet[1:nrow(tmpDataSet),-1], tmpDataSet[[1]], sort(unique(tmpDataSet[[1]])), 10)
rules = c(rules, nextRule)
uncoveredObjIdx = uncoveredObjIdx[!uncoveredObjIdx %in% nextRule$support]
tmpDataSet = tmpDataSet[uncoveredObjIdx,]
print(length(uncoveredObjIdx))
}
View(rules)
