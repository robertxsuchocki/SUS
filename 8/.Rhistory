trimmedSet$concept <- paste(trimmedSet$lymphatics, trimmedSet$blockOfAffere, trimmedSet$bl.OfLymph.c, trimmedSet$bl.OfLymph.s, trimmedSet$byPass, sep=" ")
trimmedSet <- dataSet[ncol(dataSet)]
trimmedSet$concept <- paste(trimmedSet$lymphatics, trimmedSet$blockOfAffere, trimmedSet$bl.OfLymph.c, trimmedSet$bl.OfLymph.s, trimmedSet$byPass, sep=" ")
trimmedSet <- dataSet[ncol(dataSet)]
View(trimmedSet)
trimmedSet$concept <- paste(trimmedSet$lymphatics, trimmedSet$blockOfAffere, trimmedSet$bl.OfLymph.c, trimmedSet$bl.OfLymph.s, trimmedSet$byPass, sep=" ")
dataSet$concept <- paste(dataSet$lymphatics, dataSet$blockOfAffere, dataSet$bl.OfLymph.c, dataSet$bl.OfLymph.s, dataSet$byPass, sep=" ")
trimmedSet <- dataSet[ncol(dataSet)-1, ncol(dataSet)]
trimmedSet <- dataSet[c(ncol(dataSet)-1, ncol(dataSet))]
View(trimmedSet)
aggregate(concept ~ class, trimmed)
aggregate(concept ~ class, trimmedSet)
aggregate(concept ~ class, trimmedSet, concat)
aggregate(concept ~ class, trimmedSet, ++)
aggregate(concept ~ class, trimmedSet, +)
aggregate(concept ~ class, trimmedSet, append)
dataSet$concept <- paste(dataSet$lymphatics, dataSet$blockOfAffere, dataSet$bl.OfLymph.c, dataSet$bl.OfLymph.s, dataSet$byPass, sep=" ")
trimmedSet <- dataSet[c(ncol(dataSet)-1, ncol(dataSet))]
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
dataSet$concept <- paste(dataSet$lymphatics, dataSet$blockOfAffere, dataSet$bl.OfLymph.c, dataSet$bl.OfLymph.s, dataSet$byPass, sep=" ")
trimmedSet <- dataSet[c(ncol(dataSet)-1, ncol(dataSet))]
trimmedSet[1,]
trimmedSet[1,][["concept"]]
conceptClasses <- list()
conceptIndexes <- list()
for(i in 1:nrow(trimmedSet)) {
row <- trimmedSet[i,]
concept = row[["concept"]]
conceptClasses[concept] = row[["class"]]
conceptIndexes[concept] = i
}
View(conceptClasses)
View(conceptIndexes)
View(IND)
conceptClasses <- list()
conceptIndexes <- list()
for(i in 1:nrow(trimmedSet)) {
row <- trimmedSet[i,]
concept = row[["concept"]]
conceptClasses[concept] = row$class
conceptIndexes[concept] = i
}
View(RSet)
dataSet[IND[["IND.relation"]][["arched no no no no"]]]
dataSet[IND[["IND.relation"]][["arched no no no no"]],]
IND[["IND.relation"]][["arched no no no no"]]
dataSet
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
tmpDataSet = dataSet
dataSet[IND[["IND.relation"]][["arched no no no no"]],]
dataSet[IND[["IND.relation"]][["arched no no no no"]],]$class
dataSet[IND[["IND.relation"]][["displaced no no no yes"]],]$class
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class
dataSet[IND[["IND.relation"]][["normal no no no no"]],]$class
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
print(classes)
}
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class
unique(dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class)
length(unique(dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class))
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class[1]
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class[0]
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class[2]
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class[1]
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, relation[[name]])
}
print(classes)
}
View(lower_nymph)
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_indexes = list()
lower_concepts = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_indexes = c(lower_indexes, relation[[name]])
lower_concepts = c(lower_concepts, name)
}
}
View(lower_indexes)
View(lower_concepts)
View(lower_concepts)
View(lower_indexes)
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
}
View(lower_nymph)
RSet[["upper.approximation"]][["malign lymph"]]
sorted(RSet[["upper.approximation"]][["malign lymph"]])
sort(RSet[["upper.approximation"]][["malign lymph"]])
classes
"malign lymph" %in% classes
"normal find" %in% classes
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(upper_nymph)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(upper_nymph)
library(mlbench)
library(RoughSets)
library(Rcpp)
library(RoughSets)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(upper_nymph)
View(lower_nymph)
install.packages('mlbench')
library(mlbench)
install.packages('devtools')
library(RoughSets)
install_git('https://github.com/janusza/RoughSets')
install.packages("RoughSets")
install.packages("RoughSets")
install.packages('devtools')
library(devtools)
library(RoughSets)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(upper_nymph)
RSet = BC.LU.approximation.RST(dataSet, IND)
RSet[["lower.approximation"]][["malign lymph"]]
View(RSet)
View(lower_nymph)
View(upper_nymph)
install.packages("RoughSets")
library(RoughSets)
install.packages('devtools')
library(devtools)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph[name] = relation[[name]]
#lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph[name] = relation[[name]]
#upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(upper_nymph)
View(lower_nymph)
warnings()
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph[name] = c(lower_nymph[name], relation[[name]])
#lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph[name] = relation[[name]]
#upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
relation = IND[["IND.relation"]]
lower_nymph = list()
lower2_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if (all("malign lymph" %in% classes)) {
lower2_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(lower_nymph)
View(lower2_nymph)
View(lower2_nymph)
relation = IND[["IND.relation"]]
lower_nymph = list()
lower2_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if (all("malign lymph" %in% classes)) {
lower2_nymph = c(lower2_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
relation = IND[["IND.relation"]]
lower_nymph = list()
lower2_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if (all("malign lymph" %in% classes)) {
lower2_nymph = c(lower2_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(lower2_nymph)
relation = IND[["IND.relation"]]
lower_nymph = list()
lower2_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if (all(classes == "malign lymph")) {
lower2_nymph = c(lower2_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(lower2_nymph)
relation = IND[["IND.relation"]]
class = "malign lymph"
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
if (class %in% dataSet[relation[[name]],]$class) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
if (all(dataSet[relation[[name]],]$class == class)) {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(upper_nymph)
install.packages("RoughSets")
library(RoughSets)
install.packages('devtools')
library(devtools)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
relation = IND[["IND.relation"]]
class = "malign lymph"
upper_nymph = list()
lower_nymph = list()
for (name in names(relation)) {
if (class %in% dataSet[relation[[name]],]$class) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
if (all(dataSet[relation[[name]],]$class == class)) {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
}
RSet = BC.LU.approximation.RST(dataSet, IND)
RSet[["lower.approximation"]][["malign lymph"]]
View(RSet)
View(lower_nymph)
View(upper_nymph)
