library(devtools)
library(RoughSets)
install.packages("RoughSets")
library(Rcpp)
library(RoughSets)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
RSet = BC.LU.approximation.RST(dataSet, IND)
RSet[["lower.approximation"]][["malign lymph"]]
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
RSet = BC.LU.approximation.RST(dataSet, IND)
RSet[["lower.approximation"]][["malign lymph"]]
RSet[["upper.approximation"]][["malign lymph"]]
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
View(dataSet)
View(IND)
RSet = BC.LU.approximation.RST(dataSet, IND)
RSet[["lower.approximation"]][["malign lymph"]]
View(IND)
View(RSet)
View(dataSet)
dataSet$class
"malign lymph" == dataSet$class
x = 1:148
x["malign lymph" = dataSet$class]
x["malign lymph" == dataSet$class]
1:148["malign lymph" == dataSet$class]
(1:148)["malign lymph" == dataSet$class]
malignLymphIndexes = (1:148)["malign lymph" == dataSet$class]
dataSet
dataSet[1:5]
trmimedSet = dataSet[1:5]
trimmedSet = dataSet[1:5]
View(trmimedSet)
trimmedSet[malignLymphIndexes]
trimmedSet[malignLymphIndexes,]
trimmedSet[malignLymphIndexes,-1]
trimmedSet[malignLymphIndexes,-0]
trimmedSet[malignLymphIndexes,]
trimmedSet[malignLymphIndexes,trimmedSet$lymphatics == displaced]
trimmedSet[malignLymphIndexes,trimmedSet$lymphatics == "displaced"]
trimmedSet[malignLymphIndexes,][trimmedSet$lymphatics == "displaced",]
xd = trimmedSet[malignLymphIndexes,]
xd
xd[xd$lymphatics == "displaced",]
unique(xd[xd$lymphatics == "displaced",])
trimmedSet[trimmedSet$lymphatics == "displaced",]
unique(trimmedSet[trimmedSet$lymphatics == "displaced",])
trimmedSet[trimmedSet$lymphatics == "displaced",]
attributes(dataSet)
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
dataSet[1:5]
dataSet[c(1:5, ncol(dataSet))]
"malign lymph" == dataSet$class
xd <- "malign lymph" == dataSet$class
xd
trimmedSet[malignLymphIndexes,]
dataSet[1:5][dataSet$class == "malign nymph",]
dataSet[1:5, dataSet$class == "malign nymph",]
dataSet[1:5]
dataSet[dataSet$class == "malign nymph",]
dataSet$class
dataSet[1:5][dataSet$class == "malign lymph",]
nrow(dataSet[1:5][dataSet$class == "malign lymph",])
nrow(dataSet[dataSet$class == "malign lymph",])
dataSet[1:5][dataSet$class == "malign lymph",]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
IND.relation$'arched yes yes yes yes'
IND$relation$'arched yes yes yes yes'
IND[["IND.relation"]][["arched yes yes yes yes"]]
IND[["IND.relation"]][["arched yes yes yes no"]]
IND[["IND.relation"]][["arched yes yes no no"]]
dataSet[IND[["IND.relation"]][["arched yes yes no no"]],]
trimmedSet[IND[["IND.relation"]][["arched yes yes no no"]],]
dataSet[IND[["IND.relation"]][["arched yes yes no no"]],]$class
dataSet[IND[["IND.relation"]][["displaced no no no yes"]],]$class
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class
dataSet[IND[["IND.relation"]]
]
dataSet[IND[["IND.relation"]]]
IND[["IND.relation"]]
names(IND[["IND.relation"]])
malignLymphIndexes = (1:148)["malign lymph" == dataSet$class]
trimmedSet = dataSet[1:5]
for (name in names(IND[["IND.relation"]])) {
print(name)
print(IND[["IND.relation"]][[name]])
}
malignLymphIndexes = (1:148)["malign lymph" == dataSet$class]
trimmedSet = dataSet[1:5]
for (name in names(IND[["IND.relation"]])) {
print(name)
print(dataSet[IND[["IND.relation"]][[name]],]$class)
}
malignLymphIndexes = (1:148)["malign lymph" == dataSet$class]
trimmedSet = dataSet[1:5]
for (name in names(IND[["IND.relation"]])) {
print(name)
#print(dataSet[IND[["IND.relation"]][[name]],]$class)
}
dataSet[IND[["IND.relation"]][["arched no no no no"]],]$class
dataSet[IND[["IND.relation"]][["arched no no no yes"]],]$class
FIND = BC.IND.relation.FRST(dataSet, feature.set = 1:5)
FIND = BC.IND.relation.FRST(dataSet)
View(FIND)
a
xd = list()
xd
xd["arched no no no no"] = 1
xd
xd["arched no no no no"]["malign lynph"] = 1
xd["arched no no no no"] = c(1, "malign lymph")
xd["arched no no no yes"] = c(1, "malign lymph")
xd["arched no no no yes"] = list()
xd["arched no no yes no"] = list()
xd <- vector("list", 148)
xd["arched no no yes no"] = list()
dataSet[IND[["IND.relation"]][["arched no no no no"]],]$class
xd = list()
xd = c(xd, 1)
xd
xd = c(xd, 2)
xd = c(xd, 3)
xd = c(xd, 4)
xd
xd = list()
dx = list()
dx = c(dx, 1)
dx = c(dx, 2)
dx = c(dx, 3)
dx = c(dx, 4)
dx
dx[1] = "xd"
dx
View(xd)
View(dx)
dx = list()
View(dx)
data.frame(dataSet[2,], datSet[1,])
data.frame(dataSet[2,], dataSet[1,])
data.frame(dataSet[2], dataSet[1])
install.packages('mlbench')
library(mlbench)
library(RoughSets)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
View(dataSet)
data.frame(dataSet[,c("blockOfAffere", "bl.OfLymph.c")])
data.frame(dataSet[,c("class", blockOfAffere", "bl.OfLymph.c")])
data.frame(dataSet[,c("class", "blockOfAffere", "bl.OfLymph.c")])
dataSet[,c("class", "blockOfAffere", "bl.OfLymph.c")]
dataSet[1:5]
dataSet["class", 1:5]
dataSet[, "class", 1:5]
dataSet[c(ncol(dataSet), 1:5)]
trimmedSet = dataSet[1:5]
trimmedSet$concept <- paste(trimmedSet$blockOfAffere, trimmedSet$bl.OfLymph.c, trimmedSet$bl.OfLymph.s, trimmedSet$byPass, sep=" ")
trimmedSet
dataSet[ncol(dataSet)]
trimmedSet <- dataSet[ncol(dataSet)]
dataSet$blockOfAffere
dataSet[1]
dataSet[1,]
dataSet$blockOfAffere
dataSet[2]
dataSet[2:5]
trimmedSet$concept <- paste(trimmedSet[2:5], sep=" ")
trimmedSet$concept <- paste(trimmedSet[2], sep=" ")
trimmedSet$concept <- paste(trimmedSet$lymphatics, trimmedSet$blockOfAffere, trimmedSet$bl.OfLymph.c, trimmedSet$bl.OfLymph.s, trimmedSet$byPass, sep=" ")
trimmedSet <- dataSet[ncol(dataSet)]
trimmedSet$concept <- paste(trimmedSet$lymphatics, trimmedSet$blockOfAffere, trimmedSet$bl.OfLymph.c, trimmedSet$bl.OfLymph.s, trimmedSet$byPass, sep=" ")
trimmedSet <- dataSet[ncol(dataSet)]
View(trimmedSet)
trimmedSet$concept <- paste(trimmedSet$lymphatics, trimmedSet$blockOfAffere, trimmedSet$bl.OfLymph.c, trimmedSet$bl.OfLymph.s, trimmedSet$byPass, sep=" ")
dataSet$concept <- paste(dataSet$lymphatics, dataSet$blockOfAffere, dataSet$bl.OfLymph.c, dataSet$bl.OfLymph.s, dataSet$byPass, sep=" ")
trimmedSet <- dataSet[ncol(dataSet)-1, ncol(dataSet)]
trimmedSet <- dataSet[c(ncol(dataSet)-1, ncol(dataSet))]
View(trimmedSet)
aggregate(concept ~ class, trimmed)
aggregate(concept ~ class, trimmedSet)
aggregate(concept ~ class, trimmedSet, concat)
aggregate(concept ~ class, trimmedSet, ++)
aggregate(concept ~ class, trimmedSet, +)
aggregate(concept ~ class, trimmedSet, append)
dataSet$concept <- paste(dataSet$lymphatics, dataSet$blockOfAffere, dataSet$bl.OfLymph.c, dataSet$bl.OfLymph.s, dataSet$byPass, sep=" ")
trimmedSet <- dataSet[c(ncol(dataSet)-1, ncol(dataSet))]
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
dataSet$concept <- paste(dataSet$lymphatics, dataSet$blockOfAffere, dataSet$bl.OfLymph.c, dataSet$bl.OfLymph.s, dataSet$byPass, sep=" ")
trimmedSet <- dataSet[c(ncol(dataSet)-1, ncol(dataSet))]
trimmedSet[1,]
trimmedSet[1,][["concept"]]
conceptClasses <- list()
conceptIndexes <- list()
for(i in 1:nrow(trimmedSet)) {
row <- trimmedSet[i,]
concept = row[["concept"]]
conceptClasses[concept] = row[["class"]]
conceptIndexes[concept] = i
}
View(conceptClasses)
View(conceptIndexes)
View(IND)
conceptClasses <- list()
conceptIndexes <- list()
for(i in 1:nrow(trimmedSet)) {
row <- trimmedSet[i,]
concept = row[["concept"]]
conceptClasses[concept] = row$class
conceptIndexes[concept] = i
}
View(RSet)
dataSet[IND[["IND.relation"]][["arched no no no no"]]]
dataSet[IND[["IND.relation"]][["arched no no no no"]],]
IND[["IND.relation"]][["arched no no no no"]]
dataSet
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
tmpDataSet = dataSet
dataSet[IND[["IND.relation"]][["arched no no no no"]],]
dataSet[IND[["IND.relation"]][["arched no no no no"]],]$class
dataSet[IND[["IND.relation"]][["displaced no no no yes"]],]$class
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class
dataSet[IND[["IND.relation"]][["normal no no no no"]],]$class
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
print(classes)
}
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class
unique(dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class)
length(unique(dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class))
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class[1]
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class[0]
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class[2]
dataSet[IND[["IND.relation"]][["displaced yes yes yes yes"]],]$class[1]
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, relation[[name]])
}
print(classes)
}
View(lower_nymph)
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_indexes = list()
lower_concepts = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_indexes = c(lower_indexes, relation[[name]])
lower_concepts = c(lower_concepts, name)
}
}
View(lower_indexes)
View(lower_concepts)
View(lower_concepts)
View(lower_indexes)
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
}
View(lower_nymph)
RSet[["upper.approximation"]][["malign lymph"]]
sorted(RSet[["upper.approximation"]][["malign lymph"]])
sort(RSet[["upper.approximation"]][["malign lymph"]])
classes
"malign lymph" %in% classes
"normal find" %in% classes
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(upper_nymph)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
tmpDataSet = dataSet
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = tmpDataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(lower_nymph)
View(upper_nymph)
library(mlbench)
library(RoughSets)
library(Rcpp)
library(RoughSets)
#load symbolic data set:
dataSet = read.table(file = "lymphography_processed.data", header = T, sep='\t', row.names=NULL)
dim(dataSet)
colnames(dataSet)
dataSet = cbind(dataSet[-1], class = dataSet[[1]])
#class distribution:
table(dataSet$class)
#let's take look at first two objects (rows):
as.character(dataSet$class[1:2])
dataSet[1:2,]
#The following attributes discern object  1 from 2:
colnames(dataSet)[which(dataSet[1,] != dataSet[2,])]
anyDuplicated(dataSet[-ncol(dataSet)])
#For starters, we convert our data set to format accepted by RoughSets package.
dataSet = SF.asDecisionTable(dataSet,
decision.attr = ncol(dataSet),
indx.nominal = 1:ncol(dataSet))
attributes(dataSet)
#For the moment we assume that we are only givet the firts 5 attributes.
sum(duplicated(dataSet[1:5]))                     # - now the data has duplicates
sum(duplicated(dataSet[c(1:5, ncol(dataSet))]))   # - there are inconsistent (contradictory) objects
?BC.IND.relation.RST
IND = BC.IND.relation.RST(dataSet, feature.set = 1:5)
IND
relation = IND[["IND.relation"]]
lower_nymph = list()
upper_nymph = list()
for (name in names(relation)) {
classes = dataSet[relation[[name]],]$class
if (length(unique(classes)) == 1 && classes[1] == "malign lymph") {
lower_nymph = c(lower_nymph, name, relation[[name]])
}
if ("malign lymph" %in% classes) {
upper_nymph = c(upper_nymph, name, relation[[name]])
}
}
View(upper_nymph)
View(lower_nymph)
install.packages('mlbench')
library(mlbench)
install.packages('devtools')
library(RoughSets)
install_git('https://github.com/janusza/RoughSets')
install.packages("RoughSets")
