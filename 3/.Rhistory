Lst <- list(name="Fred", wife="Mary", no.children=3, child.ages=c(4, 7, 9))
Lst[[2]]
Lst[2]
Lst$wife
c(Lst, Lst)
data.frame
x <- sin(1:100)
x
y <- ifelse(x < -0.5, "A", ifelse(x > 0.5, "C", "B"))
y
f <- data.frame(sin=x, dec=y)
f
f$cos <- sqrt(1-x*x)
f
f$sin*f$sin+f$cos*f$cos
plo(f$sin, f$cos)
plot(f$sin, f$cos)
plot(f)
plot(f)
plot(f$dec)
plot(f$dec, $sin)
plot(f$dec, f$sin)
plot(f$sin, f$dec)
hist(y)
hist(x)
data()
iris
plot(iris$Species, iris$Petal.Width)
irissub <- subset(iris, Petal.Width > 1.5)
plot(irissub$Species, irissub$Petal.Width)
install.packages("tree")
library(tree)
ir.tr <- tree(Species ~., iris)
ir.tr
ir.tr <- tree(iris$Species ~iris$Petal.W)
ir.tr
m <- dim(iris)[1]
m
val <- sample(1:m, size = round(m/3), replace = FALSE, prob = rep(1/m, m))
val
iris.learn <- iris[-val,]
iris.valid <- iris[val,]
ir.tr <- tree(Species ~., iris.learn)
ir.tr
summary(ir.tr)
fit <- predict(ir.t, iris.valid)
fit <- predict(ir.tr, iris.valid)
fit
fit <- predict(ir.tr, iris.valid, type="class")
fit
table(iris.valid$Species, fit)
plot(iris$Species)
plot(iris$Petal.Width)
plot(iris$Petal.Width, iris$Petal.Length)
plot(iris)
pairs(iris)
pairs(iris)
plot(iris$Species ~iris$Sepal.Width)
plot(iris$Species, iris$Sepal.Width)
plot(iris$Sepal.Width, iris$Species)
coplot(iris$Petal.Width ~ iris$Sepal.Length | iris$Species)
coplot(iris$Petal.Width ~ iris$Sepal.Length | iris$Sepal.Length)
image(iris$Petal.Width, iris$Petal.Length, iris$Sepal.Length)
pcol <- as.character(as.numeris(iris.valid$Species))
pcol <- as.character(as.numeric(iris.valid$Species))
pcol
pairs(iris.valid[1:4], pch=pcol, col=c("green3", "red")[(iris.valid$Species != fit)+1])
require(caret)
install.packages("caret")
require(caret)
flds <-createFolds(y, k = 10, list = TRUE, returnTrain = FALSE)
names(flds)[1] <- "train"
flds
flds <-createFolds(y, k = 10, list = TRUE, returnTrain = FALSE)
flds
for (i in 1:10) {}
irisshuf = iris
irisshuf <- irisshuf[sample(nrow(irisshuf)),]
folds <- cut(seq(1, nrow(irisshuf)), breaks=1, labels=FALSE)
folds <- cut(seq(1, nrow(irisshuf)), breaks=10, labels=FALSE)
folds
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
}
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData)
table(testData$Species, fit)
}
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData)
table(testData$Species, fit)
}
val
folds
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData)
table(testData$Species, fit)
}
testData
table(testData$Species, fit)
fit
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(~., trainData)
fit <- predict(ir.tr, testData)
table(testData$Species, fit)
}
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~, trainData)
fit <- predict(ir.tr, testData)
table(testData$Species, fit)
}
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData)
table(testData$Species, fit)
}
fit
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData, type="class")
fit <- predict(ir.tr, testData)
table(testData$Species, fit)
}
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
table(testData$Species, fit)
}
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
table(testData$Species, fit)
}
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
--table(testData$Species, fit)
}
irisshuf = iris
irisshuf <- irisshuf[sample(nrow(irisshuf)),]
folds <- cut(seq(1, nrow(irisshuf)), breaks=10, labels=FALSE)
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
tables[i] = table(testData$Species, fit)
}
tables = list(1:10)
tables
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
tables[i] = table(testData$Species, fit)
}
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
print(table(testData$Species, fit))
}
irisshuf = iris
irisshuf <- irisshuf[sample(nrow(irisshuf)),]
folds <- cut(seq(1, nrow(irisshuf)), breaks=10, labels=FALSE)
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
print(table(testData$Species, fit))
}
irissub <- subset(iris, Petal.Width > 1.5)
plot(irissub$Species, irissub$Petal.Width)
cv <- function(x) {
irisshuf = iris
irisshuf <- irisshuf[sample(nrow(irisshuf)),]
folds <- cut(seq(1, nrow(irisshuf)), breaks=10, labels=FALSE)
for (i in 1:10) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
print(table(testData$Species, fit))
}
}
cv 10
cv(10)
cv(3)
cv <- function(x) {
irisshuf = iris
irisshuf <- irisshuf[sample(nrow(irisshuf)),]
folds <- cut(seq(1, nrow(irisshuf)), breaks=x, labels=FALSE)
for (i in 1:x) {
testIndexes <- which(folds==i, arr.ind=TRUE)
testData <- irisshuf[testIndexes,]
trainData <- irisshuf[-testIndexes,]
ir.tr <- tree(Species ~., trainData)
fit <- predict(ir.tr, testData, type="class")
print(table(testData$Species, fit))
}
}
cv(10)
cv(3)
View(cv)
View(cv)
View(cv)
View(cv)
View(cv)
View(cv)
